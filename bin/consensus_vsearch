#!/bin/bash

# author: Guillaume Lentendu (guillaume.lentendu@unine.ch)

# Usage info
show_help() {
cat << EOF
VSEARCH usearch_global based taxonomic assignement with consensus taxonomy resolution across a range of similarity.
The range increases inversely proportionnaly to the highest similarity value.

Author
	Guillaume Lentendu <guillaume.lentendu@unine.ch>

Usage
	$0 [-hk] [-c COVERAGE] [-d DB] [-f FILENAME] [-i ID] [-n NCPUS] [-o OUTPUT] [-p PAIRWISE_IDDEF] [-s SENSITIVITY] fasta_file

Options
	-h	show this help

	-c COVERAGE
		minimum coverage rate of query sequence; default: 0.6
	
	-d UDB
		full path to the UDB formated reference database to search against (compulsory)
	
	-f FILENAME
		provide full hit list created with option -o to find consensus with different parameters, thus avoid re-running taxonomic assignment; off by default
	
	-i ID
		minimum identity rate; default: 0.8
	
	-k	keep temporary directory for debugging; off by default
	
	-n NCPUS
		number of CPUs to run in parallel; default: 1
	
	-o OUTPUT
		output full blast table of best hits; off by default
	
	-p PAIRWISE_IDDEF
		pairwise identity definition between 0 and 4 (see vsearch manual); default: 2
	
	-s SENSITIVITY
		consensus sensitivity S, a power index between 0.01 and 1 to control the minimum identity rate to keep sequences for consensus taxonomy construction following the formula: maxid+1-(100-maxid+1)^S; default: 0.5
	
	-t TARGET
		maximum number of target sequences to keep for consensus; default: 32

EOF
}

failed_help() {
	echo -e "$1\n"
	finish $KEEP
	exit 1
} >&2

error_help() {
	echo -e "#Error: $1\n"
	show_help | fmt -s -w $(tput cols)
	finish $KEEP
	exit 1
} >&2

finish(){
	if [ "$1" -eq 0 ]
	then
		cd $EXEC
		rm -rf $TEMP $TEMPENV
	else
		join -v 1 <(set -o posix; set | tr "=" "\t" | sort -k 1,1 ) <(cat $TEMPENV | tr "=" "\t" | sort -k 1,1 ) | grep -v "^[a-z]\|BASH_REMATCH\|TEMP" | sed "s/'//g" > final_env
		ln -s $BTK/utils/load_env $PWD
		>&2 echo "# Debugging information: use the following command to dive into the temporary directory and load environemntal variables to the current shell"
		>&2 echo "cd $TEMP && source ./load_env"
		rm $TEMPENV
	fi
}

# store initial environment
TEMPENV=$(mktemp --suffix=cons -p $PWD)
(set -o posix; set > $TEMPENV)
EXEC=$PWD
BTK=$(dirname $(readlink -f $(dirname "$0")))

# Option's default value
QCOV=0.6
ID=0.8
NCPUS=1
IDDEF=2
SEN=0.5
NTARG=32
KEEP=0

# get options
while getopts ":hc:d:f:i:kn:o:p:s:t:" opt
do
	case $opt in
		h)	show_help | fmt -s -w $(tput cols)
			finish 0
			exit 0;;
		c)	if [[ ${OPTARG} =~ ^[0-9]+\.?[0-9]*$ ]] && (( "$(bc <<<"${OPTARG} > 0.1")" )) && (( "$(bc <<<"${OPTARG} <= 1")" )); then QCOV=${OPTARG} ; else error_help "value provided to option -c should be a number between 0.1 and 1, not ${OPTARG}" ; fi ;;
		d)	DB=$(readlink -f ${OPTARG}) ; if [[ ${DB} == *"/"* ]] ; then if [ ! -d "${DB%/*}" ] ; then error_help "the directory (${DB%/*}) in the path to the database provided to -d option does not exist" ; fi ; fi ; if [ ! -f "${DB}" ] ; then error_help "database file ${DB} does not exist" ; fi ;;
		f)	FILE=$(readlink -f ${OPTARG}) ; if [ ! -f "$FILE" ] ; then error_help "input hit list file $FILE does not exist" ; fi ;;
		i)	if [[ ${OPTARG} =~ ^[0-9]+\.?[0-9]*$ ]] && (( "$(bc <<<"${OPTARG} > 0.5")" )) && (( "$(bc <<<"${OPTARG} <= 1")" )); then ID=${OPTARG} ; else error_help "value provided to option -i should be a number between 0.5 and 1, not ${OPTARG}" ; fi ;;
		k)	KEEP=1;;
		n)	NCPUS="${OPTARG}";;
		o)	OUT=$(readlink -f ${OPTARG});;
		p)	IDDEF="${OPTARG}";;
		s)	if [[ ${OPTARG} =~ ^[0-9]+\.?[0-9]*$ ]] && (( "$(bc <<<"${OPTARG} >= 0.01")" )) && (( "$(bc <<<"${OPTARG} <= 1")" )); then SEN=${OPTARG} ; else error_help "value provided to option -s should be a number between 0.01 and 1, not ${OPTARG}" ; fi ;;
		t)	NTARG=${OPTARG};;
		\?)	error_help "# Invalid option: -${OPTARG}";;
		:)	error_help "# Option -${OPTARG} requires an argument.";;
	esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --

# store input filename
if [ -z "$FILE" ]
then
	if [ -z "$1" ]
	then 
		error_help "input fasta file is missing."
	elif [ ! -f $1 ]
	then
		error_help "input fasta file $1 not found. Check filename and path and try again ;)"
	else
		IN=$(readlink -f $1) ; shift
		seqkit seq -v $IN > /dev/null
		if [ $? -gt 0 ]
		then
			error_help "input file is not in fasta format"
		fi
	fi
fi

# alignment
TEMP=$(mktemp -d -p $PWD)
cd $TEMP
INP=$(basename ${IN%.*})
if [ -z "$FILE" ]
then
	vsearch --no_progress --usearch_global $IN --threads $NCPUS --db ${DB} --dbmask none --qmask none --rowlen 0 --notrunclabels --userfields query+id${IDDEF}+qcov+target --maxaccepts $NTARG --maxrejects 0 --output_no_hits --id $ID --iddef ${IDDEF} --query_cov $QCOV --userout ${INP}.hits
	if [ ! -z $OUT ]
	then
		cp ${INP}.hits $OUT
	fi
else
	ln -s $FILE ${INP}.hits
fi

# consensus
consensus () {
	awk 'BEGIN{FS=OFS="\t"}{if(NR==1){su=$1; re=$4; sm=$2; sM=$2; cm=$3; cM=$3; t=$5; L=split($5,a,","); for(i=1;i<=L;i++){all[NR,i]=a[i]}} else {re=re","$4;  if($2<sm){sm=$2};if($2>sM){sM=$2};if($3<cm){cm=$3};if($3>cM){cM=$3}; l=split($5,a,","); for(i=1;i<=l;i++){all[NR,i]=a[i]}}}END{if(FNR==1){print su,sm,cm,t,re} else {t=all[1,1]; e=0; for(i=2;i<=L;i++){f=all[1,i];for(j=2;j<=FNR;j++){if(all[j,i]!=f){e=1; break}}; if(e==1){break}; t=t","f}; sub("(,[^:,]*:NA)+$","",t) ; print su,sm"-"sM,cm"-"cM,t,re}}'
}
export -f consensus
HEAD="query identity coverage consensus_taxonomy subject_accession"
sort -k 1,1 -k 2,2nr -t $'\t' ${INP}.hits | sed 's/;tax=/\t/;s/\*$/no_match\tNA/' | awk -v S=$SEN '{if($1 != p){i=$2; p=$1 ; print ">"$0} else {if($2 >= i+1-(100-i+1)^S ) {print}}}' | parallel -j $NCPUS --pipe -kN1 --regexp --recstart "^>" --rrs consensus | cat <(echo $HEAD | tr " " "\t") -

finish $KEEP
