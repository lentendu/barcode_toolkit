#!/bin/bash

# author: Guillaume Lentendu (guillaume.lentendu@unine.ch)

# Usage info
show_help() {
cat << EOF
This is nanobass (nanopore barcode assembler) v0.1

Author
	Guillaume Lentendu <guillaume.lentendu@unine.ch>

Description
	the nanopore barcode assembler assemble Nanopore raw reads of a single barcoded individual into contigs

Usage
	$0 [...] input_directory
  OR
	$0 [...] input_fastq(.gz)

Options
	-h	show this help
	
	-b debug mode, avoid deleting temporay directory; off by default
	
	-c COVERAGE
		coverage for keeping a position with RBK or keeping a consensus sequence with NBD; default: 50
		
	-f 	force overwrite if output directory already contain assembly results; off by default
	
	-g kingdom
		value for barrnap --kingdom option, either euk, arc, bac or mito; default: euk

	-k KIT
		barcoding kit, RBK for rapid barcoding kit or NBD for native barocding kit; default: NBD

	-l LOW_COVERAGE
		lowest coverage for keeping a position / a consensus sequence if the desired coverage (-c) cannot retrive at least one contig; default: 20
	
	-o OUTPUT_DIR
		output directory; default: nanobass.name.XXXXXXXX , with name being the basename of the input directory or filename without extension
	
	-p PRIMER_FILE
		fasta file containing the primer pair used to produce barcode sequences; off by default
	
	-r	predict rRNA with barrnap; off by default
	
	-t THREADS
		number of CPU threads; default: 2

EOF
}

error() {
	echo -e "#Error: $2\n"
	if [ $1 == "help" ]
	then 
		show_help | fmt -s -w $(tput cols)
	fi
	finish $DEBUG
	exit 1
} >&2

finish(){
	if [ "$1" -eq 1 ]
	then
		join -v 1 <(set -o posix; set | tr "=" "\t" | sort -k 1,1 ) <(cat $TEMPENV | tr "=" "\t" | sort -k 1,1 ) | grep -v "^[a-z]\|BASH_REMATCH\|TEMP" | sed "s/'//g" > final_env
		ln -s $BTK/utils/load_env $PWD
		>&2 echo "# Debugging information: use the following command to dive into the temporary directory and load environemntal variables to the current shell"
		>&2 echo "cd $TMP && source ./load_env"
	fi	
	cd $EXEC
	rm -rf $TEMPENV
}

# store initial environment
TEMPENV=$(mktemp)
(set -o posix; set > $TEMPENV)
START_TIME=`date +%s`
EXEC=$PWD
BTK=$(dirname $(readlink -f $(dirname "$0")))

# Option's default value
DEBUG=0
COV=50
MODE=COV
LOWC=20
KIT=NBD
KING=euk
NCPUS=2

# get options
while getopts ":bcf:hk:l:o:p:rt:" opt
do
	case $opt in
		h)	show_help | fmt -s -w $(tput cols)
			exit 0;;
		b)	DEBUG=1;;
		c)	COV="${OPTARG}";;
		f)	FORCE=yes;;
		g)	[[ "euk arc bac mito" =~ (^|[[:space:]])${OPTARG}($|[[:space:]]) ]] && KING="${OPTARG}" ||  error help "# invalid value for option -g: ${OPTARG}" ;;
		k)	[[ "RBK NBD" =~ (^|[[:space:]])${OPTARG}($|[[:space:]]) ]] && KIT="${OPTARG}" ||  error help "# invalid value for option -k: ${OPTARG}" ;;
		l)	LOWC="${OPTARG}";;
		o)	OUTD="${OPTARG}";;
		p)	if [ -f "${OPTARG}" ] ; then PRIM=$(readlink -f "${OPTARG}") ; else error help "primer file ${OPTARG} not found" ; fi ;;
		r)	RRNA=yes;;
		t)	NCPUS="${OPTARG}";;
		\?)	error help "# Invalid option: -${OPTARG}";;
		:)	error help "# Option -${OPTARG} requires an argument.";;
	esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

# control input
if [ -z "$1" ]
then 
	error help "input directory or fastq is needed"
elif [ -d "$1" ]
then
	if [ -z "$(find $1 -type f -name "*.fastq*")" ]
	then
		error help "input directory $1 does not contain fastq or fastq.gz files"
	fi
	RAWDIR=$(readlink -f "$1")
	RAWFQ=$(find $RAWDIR -type f -name "*.fastq*")
	BC=$(basename $RAWDIR)
elif [ -f "$1" ]
then
	if [ -s "$1" ] 
	then
		RAWFQ=$(readlink -f "$1")
		BC=$(basename $RAWFQ | sed 's/\.fastq.*$//')
	else
		error help "input file $1 is empty"
	fi
else
	error help "input is neither a file or a directory directory $1 not found. Check path and try again ;)"
fi

if [[ "$RAWFQ" == *".gz" ]]
then
	decomp () { gunzip -ck $@ ; }
else
	decomp () { cat $@ ; }
fi


# output directory
if [ -z "$OUTD" ]
then
	TMP=$(mktemp -d -p $PWD nanobass.${BC}.XXXXXXXX)
else
	TMP=$(readlink -f "$OUTD")
	if [ -d "$TMP" ]
	then
		if [ ! -z "$(find $TMP -name "*$BC.contigs*")" ] || [ ! -z "$(find $TMP -type d -name canu_assembly)" ]
		then
			if [ -z "$FORCE" ]
			then
				echo "Output directory $TMP already contain assembly, overwrite?"
				while true; do
				    read yn
				    case $yn in
				        [Yy]es ) break;;
				        [Nn]o ) echo "nanobass canceled." >&2 ; finish $DEBUG ; exit 0 ;;
				        * ) echo "Please answer yes or no." >&2;;
				    esac
				done
			else
				echo "Former assembly at $TMP will be overwritten"
				rm -rf "$TMP/canu_assembly"
			fi
		fi
	else
		mkdir "$TMP"
	fi
fi
export TMP
cd $TMP


# detect and remove primers, split double sequence if any, only use fragment between two primers of minimum 20% raw length, and in a 20% range of the expected length
if [ $KIT == "NBD" ] && [ ! -z "$PRIM" ]
then
	read FWDN FWD RVSN RVS <<< $(sed 's/^>//' "$PRIM" | tr "\n" " ")
	FWDRC=$(echo -e ">a\n$FWD" | seqkit seq -rpv -t dna| tail -1)
	RVSRC=$(echo -e ">a\n$RVS" | seqkit seq -rpv -t dna| tail -1)
	# locate primers
	decomp $RAWFQ | cutadapt -j $NCPUS -b "fwd=$FWD;o=$((${#FWD}*3/4))" -b "rvs=$RVS;o=$((${#RVS}*3/4))" -b "rvs_rc=$RVSRC;o=$((${#RVS}*3/4))" -b "fwd_rc=$FWDRC;o=$((${#FWD}*3/4))" -e 0.1 -n 5 --info-file=pos.tsv --action=none - > /dev/null 2> log.cutadapt # start positions in bed file is 0-base so keep cutadapt output as is, but need to add 1 to end position which is 1-base in bed file
	awk 'BEGIN{FS=OFS="\t"} NF>4{sub(" .*","",$1);print $1,$8,$3+1,$4+1}' pos.tsv | sort -k 1,1 | join <(seqkit fx2tab -nil $RAWFQ | sort -k 1,1) - | sort -k 1,1 -k 4,4n | awk 'func pos(m,l) {n=m/l*100; if(n<10) return "s"; else if(n<30) return "p"; else if(n<70) return "h"; else if(n<=100) return "l"} ; {if(NR==1){p=$1;L=$2;e=$5;printf "%s %s %s %s",p,L,pos($4,L),$3} else {if($1==p){printf " %s %s",pos($4-e,L),$3;e=$5} else {printf " %s\n%s %s %s %s",pos(L-e,L),$1,$2,pos($4,$2),$3;p=$1;L=$2;e=$5}}}END{printf " %s\n",pos(L-e,L)}' > primer_pattern_lookup
	awk 'BEGIN{FS=OFS="\t"} NF>4{sub(" .*","",$1);print $1,$8,$3,$4+1}' pos.tsv | sort -k 1,1 | join <(seqkit fx2tab -nil $RAWFQ | sort -k 1,1) - | sort -k 1,1 -k 4,4n | awk '{if(NR==1){p=$1;L=$2;e=$5;printf "%s %s %s %s:%s-%s",p,L,int($4/L*100),$3,$4,$5} else {if($1==p){printf " %s %s:%s-%s",int(($4-e)/L*100),$3,$4,$5;e=$5} else {printf " %s\n%s %s %s %s:%s-%s",int((L-e)/L*100),$1,$2,int($4/$2*100),$3,$4,$5;p=$1;L=$2;e=$5}}}END{printf " %s\n",int((L-e)/L*100)}' > primer_pattern
	awk 'BEGIN{OFS="\t"}{for(i=3;i<=NF;i+=2){if($i>20){if(i==3){j=gensub(".*:","","g",$(i+1)); print $1,"-","1",gensub("-.*","","g",j)-1, gensub(":.*","","g",$(i+1))} else {if(i==NF){print $1,gensub(":.*","","g",$(i-1)),gensub(".*-","","g",$(i-1))+1, $2, "-"} else {j=gensub(".*:","","g",$(i+1)); print $1,gensub(":.*","","g",$(i-1)),gensub(".*-","","g",$(i-1))+1,gensub("-.*","","g",j)-1, gensub(":.*","","g",$(i+1))}}}}}' primer_pattern > primer_str
	# expected size : need to allow for length variability (paralogs, untargeted contaminant ortologs)
	read LFR MFR <<< $(awk '$2=="fwd" && $5=="rvs_rc"{c+=1;l=$4-$3;m+=l-l/5;M+=l+l/5}END{print int(m/c),int(M/c)}' primer_str)
	# strict match of high quality expected sequence(s) in forward direction only, clustered and aligned for hmm profil
	decomp $RAWFQ | seqkit grep --quiet -f <(grep "fwd [lh] rvs_rc" primer_pattern_lookup | cut -d " " -f 1) | cutadapt -j $NCPUS -g "$FWD;o=$((${#FWD}*4/5))...${RVSRC};o=$((${#RVS}*4/5))" -e 0.1 -m $LFR -M $MFR --max-aer 0.05 - > tmp.fwd.cut 2> log.cut 
	if [ -s tmp.fwd.cut ]
	then
		# cluster high quality sequence and create hmmer profiles
		echo "extract sequences in forward direction"
		seqkit fq2fa tmp.fwd.cut | sed '/>/s/ .*/#fwd/' | seqkit sort --quiet -lr | vsearch --quiet --threads $NCPUS --cluster_smallmem - --id 0.90 --iddef 1 --centroids - | mafft --quiet - | seqkit seq -w0 -u | hmmbuild --cpu $NCPUS --informat afa -n fwd -o /dev/null tmp.fwd.hmm -
		# nhmmer to detect forward or reverse sequences
		seqkit fq2fa $RAWFQ | seqkit seq --quiet -i -m $LFR | nhmmer --cpu $NCPUS -E 1e-10 --w_length $MFR -o /dev/null --tblout tmp.tbl tmp.fwd.hmm -
		# extact matching region with bed format (RC where needed)
		seqkit subseq --quiet -j $NCPUS --bed <(awk -v l=$LFR -v L=$MFR '$1!~"^#" && $12=="+"{d=$8-$7; if(d>=l && d<=L){print $1"\t"$7"\t"$8}}' tmp.tbl) $RAWFQ | cat - <(seqkit subseq --quiet -j $NCPUS --bed <(awk '$1!~"^#" && $12=="-"{d=$7-$8; if(d>=l && d<=L){print $1"\t"$8"\t"$7}}' tmp.tbl) $RAWFQ | seqkit seq -rpv -t dna) | seqkit seq --quiet -m $LFR -M $MFR | sed '1~4s/:[\.-] *$//' > $BC.init.fastq
	else # reverse sequences
		read LRF MRF <<< $(awk '$2=="rvs" && $5=="fwd_rc"{c+=1;l=$4-$3;m+=l-l/5;M+=l+l/5}END{print int(m/c),int(M/c)}' primer_str)
		decomp $RAWFQ | seqkit grep --quiet -f <(grep "s rvs [lh] fwd_rc s" primer_pattern_lookup | cut -d " " -f 1) | cutadapt -j $NCPUS -g "$RVS;o=$((${#RVS}*4/5))...${FWDRC};o=$((${#FWD}*4/5))" -e 0.1 -m $LRF -M $MRF --max-aer 0.05 - > tmp.rvs.cut 2>> log.cut
		if [ -s tmp.rvs.cut ]
		then
			echo "extract sequences in forward direction"
			seqkit fq2fa tmp.rvs.cut | sed '/>/s/ .*/#rvs/' | seqkit sort --quiet -lr | vsearch --quiet --threads $NCPUS --cluster_smallmem - --id 0.90 --iddef 1 --centroids - | mafft --quiet - | seqkit seq -w0 -u | hmmbuild --cpu $NCPUS --informat afa -n rvs -o /dev/null tmp.rvs.hmm -
			# nhmmer to detect reverse or forward sequences
			seqkit fq2fa $RAWFQ | seqkit seq --quiet -i -m $LRF | nhmmer --cpu $NCPUS -E 1e-10 --w_length $MFR -o /dev/null --tblout tmp.tbl tmp.rvs.hmm -
			# extact matching region with bed format (RC where needed)
			seqkit subseq --quiet -j $NCPUS --bed <(awk -v l=$LFR -v L=$MFR '$1!~"^#" && $12=="+"{d=$8-$7; if(d>=l && d<=L){print $1"\t"$7"\t"$8}}' tmp.tbl) $RAWFQ | seqkit seq -rpv -t dna | cat - <(seqkit subseq --quiet -j $NCPUS --bed <(awk '$1!~"^#" && $12=="-"{d=$7-$8; if(d>=l && d<=L){print $1"\t"$8"\t"$7}}' tmp.tbl) $RAWFQ) | seqkit seq --quiet -m $LRF -M $MRF | sed '1~4s/:[\.-] *$//' > $BC.init.fastq
		else
			error stop "no reads could be extracted with strict primer matching"
		fi
	fi
	rm pos.tsv primer_* tmp.*
else
	# or get rid of too long and too short sequences
	seqkit seq -m $(printf '%.0f\n' $(echo $GS*100 | bc)) -M $(printf '%.0f\n' $(echo $GS*2000 | bc)) $RAWFQ > $BC.init.fastq
fi


# parameters specific to barcoding kit
# determine the expected length by using the 90 / 97% percentile length plus 10% 
# if difference between maxlength and Q90 / Q97 is greater than Q90/2 / Q97/2, use Q90 / Q97 else use max
tileormax () {
	TIL=$1; shift
	seqkit fx2tab -iln $(if [ -p /dev/stdin ] ; then cat - ; else echo ${@} ; fi) | sort -n -k 2,2 | awk -v T=$TIL '{all[NR] = $2} END{Q=int(int(all[int(NR*T/100-0.5)]*1.1)/100+0.5)*100 ; if( (all[FNR]-Q) > Q/2) {print Q/1000} else print int(all[FNR]/100)/10 }'
}
if [ "$KIT" == "NBD" ] # native barcoding kit = full sequences most of the time, sometimes double sequences
then
	GS=$(tileormax 90 $BC.init.fastq)
elif [ "$KIT" == "RBK" ] # rapide barcoding kit = small to full sequences, need to keep lots of small reads
then
	GS=$(tileormax 97 $BC.init.fastq)
	MINL=300
	if [ $(echo "$GS > 3.5" | bc) -eq 1 ]
	then
		MINO=150 # reduced minimum overlap for longer barcodes works better, likely because coverage is reduced, so less chance to have overlap
	else
		MINO=200
	fi
fi

if (( $(echo "$GS < 1" | bc -l) ))
then
	>&2 decomp $RAWFQ | seqkit stat -T | column -t -s $'\t'
	error stop "Raw reads of $BC are too small to allow assembly; expected length computed at ${GS}K nt. Abort"
fi
echo "Expected length fixed at ${GS}K nt"

# determine if enough reads to achieve coverage on expected length
read RTOTL RMEANL <<< $(cat $BC.init.fastq | seqkit stat -T | sed '1d' | cut -f 5,7)
if [ $RTOTL -lt $(awk -v S=$GS -v M=$RMEANL -v C=${!MODE} 'BEGIN{F=int(S*1000/M+0.99); print int(S*1000*F*C)}') ]
then
	echo "Warning: Not enough raw reads to allow for ${COV}X coverage for $BC, switch to low coverage mode"
	MODE=LOWC
	if [ $RTOTL -lt $(awk -v S=$GS -v M=$RMEANL -v C=${!MODE} 'BEGIN{F=int(S*1000/M+0.99); print int(S*1000*F*C)}') ]
	then
		error stop "Not enough raw reads to allow for ${LOWC}X low coverage for $BC. Aborting"
	fi
fi

# Clustering or assembly
if [ "$KIT" == "NBD" ]
then
	rattle cluster -i $BC.init.fastq -t $NCPUS -s 0.9 2> log.rattle # need to test higher similarity to check for overclustering
	rattle cluster_summary -i $BC.init.fastq -c clusters.out > cluster_summary.tsv 2>> log.rattle
	mkdir clusters
	rattle extract_clusters -i $BC.init.fastq -c clusters.out -o clusters --fastq -m ${!MODE} 2>> log.rattle
	rattle correct -i $BC.init.fastq -c clusters.out -t $NCPUS 2>> log.rattle
	rattle polish -i consensi.fq -t $NCPUS 2>> log.rattle
	seqkit fq2fa transcriptome.fq | awk -v C=${!MODE} '{if($1~"^>"){flag=0;for(i=2;i<=NF;i++){if($i~"^total_read"){split($i,a,"=");if(a[2]>=C){print $0;flag=1;break}}}} else {if(flag==1){print $0}}}' > $BC.contigs.N${!MODE}.fasta
	rm -r *.fq clusters clusters.out
	if [ ${!MODE} -eq $COV ] && [ ! -s $BC.contigs.N${!MODE}.fasta ]
	then
		echo "Warning: no contig found with ${!MODE}X coverage for $BC, switch to low coverage mode"
		rm $BC.contigs.N${!MODE}.fasta
		MODE=LOWC
		mkdir clusters
		rattle extract_clusters -i $BC.init.fastq -c clusters.out -o clusters --fastq -m ${!MODE} 2>> log.rattle
		rattle correct -i $BC.init.fastq -c clusters.out -t $NCPUS 2>> log.rattle
		rattle polish -i consensi.fq -t $NCPUS 2>> log.rattle
		seqkit fq2fa transcriptome.fq | awk -v C=${!MODE} '{if($1~"^>"){flag=0;for(i=2;i<=NF;i++){if($i~"^total_read"){split($i,a,"=");if(a[2]>=C){print $0;flag=1;break}}}} else {if(flag==1){print $0}}}' > $BC.contigs.N${!MODE}.fasta
		rm -r *.fq clusters clusters.out
		if [ ! -s $BC.contigs.N${!MODE}.fasta ]
		then
			error stop "no contig found with ${!MODE}X low coverage for $BC. Aborting"
		fi
	fi
else
	# filter, correct and assemble with canu
	mkdir canu_assembly
	echo "start canu with overlap length of $MINO"
	canu -p $BC -d canu_assembly useGrid=false genomeSize=${GS}k maxThreads=$NCPUS minReadLength=$MINL minOverlapLength=$MINO TRIMReadsOverlap=$MINO corOutCoverage=1000 -nanopore-raw $BC.init.fastq > log.canu 2>&1
	
	# if no contig assemble, if longest contig is 60% smaller than expected length, or if less than 20% of trimmed reads are used for all contigs, try two times again (sometimes randomly failed), then increase error rate for correction and decrease minimum overlap to 3/4, then to 1/2 of initialy set overlap length
	c=0
	while [ $c -lt 4 ]
	do
		if [ ! -s canu_assembly/${BC}.contigs.fasta ]
		then
			echo "previous canu job did not found contigs"
			if [ $c -lt 2 ]
			then
				echo "restart canu with same parameters"
				rm -rf canu_assembly
				canu -p $BC -d canu_assembly useGrid=false genomeSize=${GS}k maxThreads=$NCPUS minReadLength=$MINL minOverlapLength=$MINO TRIMReadsOverlap=$MINO corOutCoverage=1000 -nanopore-raw $BC.init.fastq >> log.canu 2>&1
			else
				if [ $c -eq 2 ] ; then MINO=$((MINO*3/4)) ; else MINO=$((MINO*2/3)) ; fi
				echo "restart canu with overlap length of $MINO"
				rm -rf canu_assembly
				canu -p $BC -d canu_assembly useGrid=false genomeSize=${GS}k maxThreads=$NCPUS minReadLength=$MINL minOverlapLength=$MINO TRIMReadsOverlap=$MINO corOutCoverage=1000 correctedErrorRate=0.2 -nanopore-raw $BC.init.fastq >> log.canu 2>&1
			fi
		else
			# stat on contig assemble from most reads
			MLEN=$(sed -r -n '/>/s/.*len=([0-9]*).*/\1/p' canu_assembly/${BC}.contigs.fasta | awk '{l[NR]=$1;if($1>max){max=$1;id=NR}}END{print l[id]}')
			# total reads in contigs
			TRC=$(sed -r -n '/>/s/.*reads=([0-9]*) .*/\1/p' canu_assembly/${BC}.contigs.fasta | awk '{s+=$1}END{print s}')
			# trimmed reads
			TRIM=$(seqkit stat -T canu_assembly/${BC}.correctedReads.fasta.gz | sed '1d' | cut -f 4)
			if [ $(echo "$MLEN / ($GS * 1000) < 0.6" | bc -l) -eq 1 ] || [ $(echo "$TRC / $TRIM < 0.2" | bc -l) -eq 1 ]
			then
				echo "previous canu job produced contigs with length lower than 60% of the expected length or using less than 20% of raw reads"
				if [ $c -lt 2 ]
				then
					echo "restart canu with same parameters"
					rm -rf canu_assembly
					canu -p $BC -d canu_assembly useGrid=false genomeSize=${GS}k maxThreads=$NCPUS minReadLength=$MINL minOverlapLength=$MINO TRIMReadsOverlap=$MINO corOutCoverage=1000 -nanopore-raw $BC.init.fastq >> log.canu 2>&1
				else
					if [ $c -eq 2 ] ; then MINO=$((MINO*3/4)) ; else MINO=$((MINO*2/3)) ; fi
					echo "restart canu with overlap length of $MINO"
					rm -rf canu_assembly
					canu -p $BC -d canu_assembly useGrid=false genomeSize=${GS}k maxThreads=$NCPUS minReadLength=$MINL minOverlapLength=$MINO TRIMReadsOverlap=$MINO corOutCoverage=1000 correctedErrorRate=0.2 -nanopore-raw $BC.init.fastq >> log.canu 2>&1
				fi
			else
				break
			fi
		fi
		c=$((c+1))
	done
	
	if [ -s canu_assembly/${BC}.contigs.fasta ]
	then
		# coverage stats
		CONT=$(awk '$4=="contig"{printf "%s,", $1}' canu_assembly/$BC.contigs.layout.tigInfo | sed 's/,$//')
		Rscript --vanilla $BTK/utils/canu_coverage.R $BC $COV $LOWC $CONT
		
		if [ -s ${BC}.Ncov.tsv ]
		then
			# Select only contig fragments with at least coverage of COV reads
			sed -r '/>/s/(>tig00*[0-9]) ([^ ]*) /\1_\2_/' canu_assembly/$BC.contigs.fasta | seqkit subseq --quiet -j $NCPUS -w 160 --bed <(grep ">" canu_assembly/$BC.contigs.fasta | cut -d " " -f 1-3 | sed -r 's/>(tig00*)([0-9]) ([^ ]*) /\2 \1\2_\3_/' | join - <(grep N${!MODE} ${BC}.Ncov.tsv) | tr " " "\t" | cut -f 2-4) | sed -r "/>/s/_([0-9]*-[0-9]*):\.[ \t]*$/_subseqN${!MODE}=\1/" > $BC.contigs.N${!MODE}.fasta
			if [ ${!MODE} -eq $COV ] && [ ! -s $BC.contigs.N${!MODE}.fasta ]
			then
				rm $BC.contigs.N${!MODE}.fasta
				echo "Warning: no contig found with ${!MODE}X coverage for $BC, switch to low coverage mode"
				MODE=LOWC
				sed -r '/>/s/(>tig00*[0-9]) ([^ ]*) /\1_\2_/' canu_assembly/$BC.contigs.fasta | seqkit subseq -j $NCPUS -w 160 --bed <(grep ">" canu_assembly/$BC.contigs.fasta | cut -d " " -f 1-3 | sed -r 's/>(tig00*)([0-9]) ([^ ]*) /\2 \1\2_\3_/' | join - <(grep N${!MODE} ${BC}.Ncov.tsv) | tr " " "\t" | cut -f 2-4) | sed -r "/>/s/_([0-9]*-[0-9]*):\.[ \t]*$/_subseqN${!MODE}=\1/" > $BC.contigs.N${!MODE}.fasta
				if [ ! -s $BC.contigs.N${!MODE}.fasta ]
				then
					error stop "no contig found with ${!MODE}X low coverage for $BC. Aborting"
				fi
			fi
		fi
	else
		error stop "no contigs could be assembled by canu, review canu log file(s) at $TMP/log.canu"
	fi
fi

# extract rRNA sequences
if [ ! -z "$RRNA" ]
then
	# predict rRNA
	barrnap --reject 0.1 --kingdom $KING --threads $NCPUS --outseq ${BC}.contigs.N${!MODE}.rrna.fasta $BC.contigs.N${!MODE}.fasta > log.barrnap 2>&1
fi

# Some contigs are reverse complement of longer contigs (barcode01)
# barnap identify the strand, so might be useful information to come back to raw reads, RC them and rerun canu

finish $DEBUG
